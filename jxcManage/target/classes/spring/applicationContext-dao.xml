<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-4.0.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	   http://www.springframework.org/schema/cache
	   http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">

	<!-- 配置  扫描-->
	 <context:annotation-config /> 
	<context:component-scan base-package="jm.*" />
	
	<!-- 加载jdbc -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置  连接池  -->
	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
       <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
     	<property name="url" value="${jdbc.url}?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
       <!-- <property name="username" value="root"/>
       <property name="password" value="new-password"/> -->
       
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->  
        <property name="initialSize" value="5" /> 
        <!-- 连接池的最大值 -->
		<property name="maxActive" value="50" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="10" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="4" />
		<!--#在取出连接时进行有效验证-->
		<property name="testOnBorrow" value="true" />
		<!-- 当需要的连接数大于池中的现有连接数(numActive)时,连接池再创建新的连接，就这样一直创建一直增加,当达到 maxActive时不在创建.
		新来的客户请求如果需要数据库连接,则处于等待状态，等maxWait毫秒	-->
		<property name="maxWait" value="90000" />
		<!--没有收回的连接：如果连接池中的连接,一直没有关闭,即程序一直没有关闭该连接,或者说一直没有将该连接放回池中,
		此时如果该连接超过removeAbandonedTimeout设置的n秒,认为该连接已被泄漏,连接池进行清理,注意并没有放入池中,而是直接清理掉.-->
		<property name="removeAbandonedTimeout" value="10" />
		<property name="removeAbandoned" value="true" />
		<!-- #空闲连接：    每 timeBetweenEvictionRunsMillis毫秒检查一次连接池中空闲的连接,
		把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开,直到连接池中的连接数到minIdle为止 -->
		<property name="timeBetweenEvictionRunsMillis" value="600000" />
		<!-- # 默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="600000" />
		<property name="defaultAutoCommit" value="false"></property> 
    </bean>
    
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mapper中的类型别名 -->
		<property name="configLocation" value="classpath:/mybatis/config-mybatis.xml"/>
		<property name="typeAliasesPackage" value="jm.basic.bean"></property>
	</bean>

	<!-- 扫描指定包下的Mapper，自动创建mapper bean实例 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="jm.basic.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="get*" read-only="true" />  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="load*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <tx:method name="check*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="search*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>  
   <!--  切入事物 -->
    <aop:config>  
        <aop:advisor pointcut="execution(* jm.service.impl..*.*(..))"  advice-ref="txAdvice" />  
    </aop:config> 

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"  />
	</bean>
    
    
</beans>